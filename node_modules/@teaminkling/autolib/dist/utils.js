"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var max_satisfying_1 = __importDefault(require("semver/ranges/max-satisfying"));
var core = __importStar(require("@actions/core"));
var exec = __importStar(require("@actions/exec"));
var ReplacementMap_1 = require("./types/ReplacementMap");
/**
 * Given a file, perform replacements based on the [ReplacementMap] and write.
 *
 * @param filename the file's name
 * @param replacements the [Array] of [ReplacementMap]s
 */
function rewriteFileContentsWithReplacements(filename, replacements) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            fs_1.default.exists(filename, function (exists) {
                if (exists) {
                    /* If the file exists, we can perform the replacement by reading from the file first: */
                    fs_1.default.readFile(filename, function (_, data) {
                        var replaced = data.toString();
                        replacements.forEach(function (replaceMap) {
                            replaced = replaced.replace(replaceMap.matcher, replaceMap.replacement);
                        });
                        fs_1.default.writeFile(filename, replaced, function () { return null; });
                    });
                }
                else {
                    /* If the file does not exist, we produce a warning and stop. */
                    core.warning("[Autolib] Cannot perform replace-rewrite of file that does not exist: " + filename + ".");
                }
            });
            return [2 /*return*/];
        });
    });
}
exports.rewriteFileContentsWithReplacements = rewriteFileContentsWithReplacements;
/**
 * Given a file, perform a single replacement based on the matcher and replacement.
 *
 * @param filename the file's name
 * @param matcher the matcher [RegExp]
 * @param replacement the replacement [string]
 */
function rewriteFileContentsWithReplacement(filename, matcher, replacement) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, rewriteFileContentsWithReplacements(filename, [new ReplacementMap_1.ReplacementMap(matcher, replacement)])];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.rewriteFileContentsWithReplacement = rewriteFileContentsWithReplacement;
function findLatestVersionFromText(text, stableOnly) {
    return __awaiter(this, void 0, void 0, function () {
        var cleanedText, maxVersion;
        return __generator(this, function (_a) {
            cleanedText = text.trim()
                .split('\n')
                .map(function (text) { return text.trim(); });
            maxVersion = max_satisfying_1.default(cleanedText, ">0.0.0", { includePrerelease: !stableOnly });
            core.info("[Autolib] [Result] Of versions: [" + cleanedText.join(', ') + "], the " +
                ((stableOnly ? 'stable max' : 'max including pre-releases') + " was found to be: [" + maxVersion + "]."));
            return [2 /*return*/, maxVersion];
        });
    });
}
exports.findLatestVersionFromText = findLatestVersionFromText;
/**
 * Using `git` tags, find the latest version (if this is possible).
 *
 * If no version is found, just return 0.0.0 with no info associated.
 *
 * @param stableOnly whether we should only extract stable versions
 */
function findLatestVersionFromGitTags(stableOnly) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        var _this = this;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, exec.exec('git fetch --tags')];
                case 1:
                    _b.sent();
                    return [4 /*yield*/, exec.exec('git tag', [], {
                            listeners: {
                                stdout: function (data) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, findLatestVersionFromText(data.toString(), stableOnly)];
                                            case 1: return [2 /*return*/, (_a.sent())];
                                        }
                                    });
                                }); }
                            }
                        })];
                case 2:
                    _b.sent();
                    return [3 /*break*/, 4];
                case 3:
                    _a = _b.sent();
                    core.warning('[Autolib] Error in fetching a compliant max git tag. Returning [0.0.0].');
                    return [3 /*break*/, 4];
                case 4: 
                /* Fallthrough: 0.0.0 when no tags are found to be valid. */
                return [2 /*return*/, "0.0.0"];
            }
        });
    });
}
exports.findLatestVersionFromGitTags = findLatestVersionFromGitTags;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMENBQW9CO0FBRXBCLGdGQUFtRTtBQUVuRSxrREFBc0M7QUFDdEMsa0RBQXNDO0FBRXRDLHlEQUF3RDtBQUd4RDs7Ozs7R0FLRztBQUNILFNBQXNCLG1DQUFtQyxDQUNyRCxRQUFnQixFQUFFLFlBQThCOzs7WUFFaEQsWUFBRSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsVUFBQyxNQUFlO2dCQUNoQyxJQUFJLE1BQU0sRUFBRTtvQkFDUix3RkFBd0Y7b0JBRXhGLFlBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLFVBQUMsQ0FBQyxFQUFFLElBQVk7d0JBQ2xDLElBQUksUUFBUSxHQUFXLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzt3QkFFdkMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFDLFVBQTBCOzRCQUM1QyxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQzt3QkFDNUUsQ0FBQyxDQUFDLENBQUM7d0JBRUgsWUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLGNBQU0sT0FBQSxJQUFJLEVBQUosQ0FBSSxDQUFDLENBQUM7b0JBQ2pELENBQUMsQ0FBQyxDQUFDO2lCQUNOO3FCQUFNO29CQUNILGdFQUFnRTtvQkFFaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQywyRUFBeUUsUUFBUSxNQUFHLENBQUMsQ0FBQztpQkFDdEc7WUFDTCxDQUFDLENBQUMsQ0FBQzs7OztDQUNOO0FBdEJELGtGQXNCQztBQUdEOzs7Ozs7R0FNRztBQUNILFNBQXNCLGtDQUFrQyxDQUNwRCxRQUFnQixFQUFFLE9BQWUsRUFBRSxXQUFtQjs7Ozt3QkFFdEQscUJBQU0sbUNBQW1DLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSwrQkFBYyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUE7O29CQUEvRixTQUErRixDQUFDOzs7OztDQUNuRztBQUpELGdGQUlDO0FBRUQsU0FBc0IseUJBQXlCLENBQUMsSUFBWSxFQUFFLFVBQW1COzs7O1lBQ3ZFLFdBQVcsR0FBYSxJQUFJLENBQUMsSUFBSSxFQUFFO2lCQUNwQyxLQUFLLENBQUMsSUFBSSxDQUFDO2lCQUNYLEdBQUcsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBWCxDQUFXLENBQUMsQ0FBQztZQUV4QixVQUFVLEdBQVcsd0JBQXVCLENBQzlDLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBQyxpQkFBaUIsRUFBRSxDQUFDLFVBQVUsRUFBQyxDQUN6RCxDQUFDO1lBRUgsSUFBSSxDQUFDLElBQUksQ0FDTCxzQ0FBb0MsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBUztpQkFDbkUsQ0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsNEJBQTRCLDRCQUFzQixVQUFVLE9BQUksQ0FBQSxDQUNsRyxDQUFDO1lBRUYsc0JBQU8sVUFBVSxFQUFDOzs7Q0FDckI7QUFmRCw4REFlQztBQUdEOzs7Ozs7R0FNRztBQUNILFNBQXNCLDRCQUE0QixDQUFDLFVBQW1COzs7Ozs7OztvQkFFOUQscUJBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxFQUFBOztvQkFBbkMsU0FBbUMsQ0FBQztvQkFDcEMscUJBQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFOzRCQUMzQixTQUFTLEVBQUU7Z0NBQ1AsTUFBTSxFQUFFLFVBQU8sSUFBWTs7O29EQUNmLHFCQUFNLHlCQUF5QixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRSxVQUFVLENBQUMsRUFBQTtvREFBcEUsc0JBQU8sQ0FBQyxTQUE0RCxDQUFFLEVBQUM7OztxQ0FDMUU7NkJBQ0o7eUJBQ0osQ0FBQyxFQUFBOztvQkFORixTQU1FLENBQUM7Ozs7b0JBRUgsSUFBSSxDQUFDLE9BQU8sQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDOzs7Z0JBRzVGLDREQUE0RDtnQkFFNUQsc0JBQU8sT0FBTyxFQUFDOzs7O0NBQ2xCO0FBakJELG9FQWlCQyJ9