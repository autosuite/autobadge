"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var core = __importStar(require("@actions/core"));
/**
 * The regular expression that represents a version release.
 *
 * For example, `v0.11.5-beta+17-2020-05-12` will provide parts:
 *
 * - `0`: `0`
 * - `1`: `11`
 * - `2`: `5`
 * - `3`: `-beta+17-2020-05-12`
 */
exports.SEMVER_REGEXP = /v?(?<major>\d+)\.(?<minor>\d+)\.(?<patch>\d+)(?<info>.*)/;
/** A basic concrete representation of a Semantic Version. */
var SemVer = /** @class */ (function () {
    function SemVer(major, minor, patch, info) {
        this._major = major;
        this._minor = minor;
        this._patch = patch;
        this._info = info;
    }
    Object.defineProperty(SemVer.prototype, "major", {
        get: function () {
            return this._major;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SemVer.prototype, "minor", {
        get: function () {
            return this._minor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SemVer.prototype, "patch", {
        get: function () {
            return this._patch;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SemVer.prototype, "info", {
        get: function () {
            return this._info;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * From a textual version, create a [SemVer].
     *
     * These might be something like `0.31.5` or `2.0.0-some_info_here+2020-03-01`, for example.
     *
     * @param text the textual version
     */
    SemVer.constructFromText = function (text) {
        var match = text.match(exports.SEMVER_REGEXP);
        if (!match) {
            throw Error("Provided text is not valid SemVer: [" + text + "]");
        }
        var groups = match.groups;
        if (groups === undefined) {
            throw Error('Text has no line-delimited trimmed SemVer versions!');
        }
        var major = parseInt(groups.major, 10);
        var minor = parseInt(groups.minor, 10);
        var patch = parseInt(groups.patch, 10);
        /* Force set to null if falsey (empty string). */
        var info = groups.info || null;
        return new SemVer(major, minor, patch, info);
    };
    /**
     * Return the "zero version" as a [SemVer].
     */
    SemVer.constructZero = function () {
        return new SemVer(0, 0, 0, null);
    };
    /**
     * Find the largest of any number of [[SemVer]]s.
     *
     * @param versions the [[SemVer]]s for which to find the maximum
     */
    SemVer.max = function (versions) {
        var runningMax = SemVer.constructZero();
        if (versions.length === 0) {
            core.warning('[Autolib] Running SemVer.max with an empty array. Returning 0.0.0.');
        }
        versions.forEach(function (version) {
            runningMax = SemVer.compare(version, runningMax);
        });
        return runningMax;
    };
    /**
     * Return the larger of two [[SemVer]]s.
     *
     * @param left a [[SemVer]]
     * @param right a [[SemVer]]
     */
    SemVer.compare = function (left, right) {
        var majorIsSame = left.major === right.major;
        var majorIsLeft = left.major > right.major;
        var minorIsSame = left.minor === right.minor;
        var minorIsLeft = left.minor > right.minor;
        var patchIsSame = left.patch === right.patch;
        var patchIsLeft = left.patch > right.patch;
        /* Is minor greater? */
        var minorIncremented = majorIsSame && minorIsLeft;
        /* Is minor the same and the left patch is greater? */
        var patchIncremented = !minorIncremented && minorIsSame && patchIsLeft;
        /* Failing that, is the left version stable and the right version unstable? */
        var versionStabilized = (!patchIncremented && patchIsSame && left.info === null && right.info !== null);
        /* Failing that, is the left version's version lexically greater? */
        var infoIncremented = (!versionStabilized && left.info != null && right.info != null && left.info.localeCompare(right.info) === 1);
        if (majorIsLeft || minorIncremented || patchIncremented || versionStabilized || infoIncremented) {
            return left;
        }
        return right;
    };
    /**
     * Return "true" if this is a "zero version".
     */
    SemVer.prototype.isZero = function () {
        return (this.major === 0 && this.minor === 0 && this.patch === 0 && this.info == null);
    };
    SemVer.prototype.toString = function () {
        var representation = this.major + "." + this.minor + "." + this.patch;
        if (this.info) {
            return "" + representation + this.info;
        }
        return representation;
    };
    return SemVer;
}());
exports.SemVer = SemVer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VtVmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3R5cGVzL1NlbVZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxrREFBc0M7QUFFdEM7Ozs7Ozs7OztHQVNHO0FBQ1UsUUFBQSxhQUFhLEdBQUcsMERBQTBELENBQUM7QUFHeEYsNkRBQTZEO0FBQzdEO0lBaUlJLGdCQUFtQixLQUFhLEVBQUUsS0FBYSxFQUFFLEtBQWEsRUFBRSxJQUFtQjtRQUMvRSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0lBekhELHNCQUFJLHlCQUFLO2FBQVQ7WUFDSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDdkIsQ0FBQzs7O09BQUE7SUFFRCxzQkFBSSx5QkFBSzthQUFUO1lBQ0ksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3ZCLENBQUM7OztPQUFBO0lBRUQsc0JBQUkseUJBQUs7YUFBVDtZQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN2QixDQUFDOzs7T0FBQTtJQUVELHNCQUFJLHdCQUFJO2FBQVI7WUFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7SUFFRDs7Ozs7O09BTUc7SUFDVyx3QkFBaUIsR0FBL0IsVUFBZ0MsSUFBWTtRQUN4QyxJQUFNLEtBQUssR0FBNEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxxQkFBYSxDQUFDLENBQUM7UUFFakUsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE1BQU0sS0FBSyxDQUFDLHlDQUF1QyxJQUFJLE1BQUcsQ0FBQyxDQUFDO1NBQy9EO1FBRUQsSUFBTSxNQUFNLEdBQTBDLEtBQUssQ0FBQyxN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