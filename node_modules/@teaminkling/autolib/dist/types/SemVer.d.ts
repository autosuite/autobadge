/**
 * The regular expression that represents a version release.
 *
 * For example, `v0.11.5-beta+17-2020-05-12` will provide parts:
 *
 * - `0`: `0`
 * - `1`: `11`
 * - `2`: `5`
 * - `3`: `-beta+17-2020-05-12`
 */
export declare const SEMVER_REGEXP: RegExp;
/** A basic concrete representation of a Semantic Version. */
export declare class SemVer {
    /** The major version, immutable. */
    readonly _major: number;
    /** The minor number, immutable. */
    readonly _minor: number;
    /** The patch number, immutable. */
    readonly _patch: number;
    /** The information string, if applicable, immutable. */
    readonly _info: string | null;
    get major(): number;
    get minor(): number;
    get patch(): number;
    get info(): string | null;
    /**
     * From a textual version, create a [SemVer].
     *
     * These might be something like `0.31.5` or `2.0.0-some_info_here+2020-03-01`, for example.
     *
     * @param text the textual version
     */
    static constructFromText(text: string): SemVer;
    /**
     * Return the "zero version" as a [SemVer].
     */
    static constructZero(): SemVer;
    /**
     * Find the largest of any number of [[SemVer]]s.
     *
     * @param versions the [[SemVer]]s for which to find the maximum
     */
    static max(versions: SemVer[]): SemVer;
    /**
     * Return the larger of two [[SemVer]]s.
     *
     * @param left a [[SemVer]]
     * @param right a [[SemVer]]
     */
    private static compare;
    constructor(major: number, minor: number, patch: number, info: string | null);
    /**
     * Return "true" if this is a "zero version".
     */
    isZero(): boolean;
    toString(): string;
}
