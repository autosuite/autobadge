"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var __1 = require("..");
describe('findLatestVersionFromText (nominal)', function () {
    var parameters = [
        /* A normal case in logical ascending order where everything is v-prefixed and there are only single digits. */
        {
            'lines': [
                'v0.1.0',
                'v0.2.0',
                'v0.2.1',
                'v0.2.2',
                'v0.2.3',
                'v0.2.4',
                'v0.2.5',
                'v1.0.0',
                'v1.0.1',
            ],
            'stable': true,
            'expectedVersion': "1.0.1",
        },
        /* A bit more of a complicated case where there's order but some versions are skipped with double digits. */
        {
            'lines': [
                'v0.3.0',
                'v0.10.0',
                'v0.11.5',
                'v0.11.27',
                'v1.2.3',
                'v3.2.1',
                'v3.3.333',
                'v3.4.0',
                'v3.4.1',
            ],
            'stable': true,
            'expectedVersion': "3.4.1",
        },
        /* Chaotic ordering where some (but not all) of the cases have info strings and some aren't v-prefixed. */
        {
            'lines': [
                'v3.12.3',
                '11.0.77-i11',
                'v0.10.1-rc2',
                '1.234.20-info3',
                'v0.0.0-initial',
                '0.2.4',
                'v0.2.5',
            ],
            'stable': true,
            'expectedVersion': "3.12.3",
        },
        /* Introducing cases that are completely invalid and some duplicate cases. */
        {
            'lines': [
                'v1.9.12-alpha',
                'v0.02.0005',
                'invalid version',
                '0.00.000-test',
                '5.0.022-rc12+build5',
                '0.11.2',
            ],
            'stable': true,
            'expectedVersion': "0.11.2",
        },
        /* Now allowing info string cases in the maximum calculation (lexicographical order). */
        {
            'lines': [
                '81.2.abc-test',
                'v2.07.00001-info',
                '1.1.1',
                'v0.0.0-init',
                '5.007.06-rc3',
                'invalid',
                '005.6.7-blah',
            ],
            'stable': false,
            'expectedVersion': "5.7.6-rc3",
        },
        /* Checking to make sure precedence exists between info versions and stable and whitespace is fine. */
        {
            'lines': [
                '\r0.5.1\n',
                '0.5.10-unstable\n  ',
                '\t1.0.1-rc51\n',
                '  \n\n 1.0.1',
                '\ninvalid ',
                ' 0.2.1-blah \r\n ',
            ],
            'stable': false,
            'expectedVersion': "1.0.1",
        },
        /* Checking to make sure that if everything is invalid, 0.0.0 will be returned. */
        {
            'lines': [
                '\r0.asd.1\n',
                '123!!!.5.10-!@#\n  ',
                '\t#@.!.@#-rc51\n',
                '  \n\n 1',
                '\ninvalid ',
                ' 123abc \r\n ',
            ],
            'stable': false,
            'expectedVersion': "0.0.0",
        },
    ];
    parameters.forEach(function (group) { return it("...finds the latest " + (group.stable ? 'stable ver.' : 'ver.') + " correctly from (trimmed): " +
        ("[" + group.lines.map(function (line) { return "'" + line.trim() + "'"; }).join(', ') + "]"), function () { return __awaiter(void 0, void 0, void 0, function () {
        var version;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, __1.findLatestVersionFromText(group.lines.join('\n'), group.stable)];
                case 1:
                    version = (_a.sent());
                    chai_1.expect(version).to.eql(group.expectedVersion);
                    return [2 /*return*/];
            }
        });
    }); }); });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXgudGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9fX3Rlc3RfXy9pbmRleC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkJBQThCO0FBRTlCLHdCQUErQztBQUcvQyxRQUFRLENBQUMscUNBQXFDLEVBQUU7SUFDNUMsSUFBTSxVQUFVLEdBSVY7UUFDRiwrR0FBK0c7UUFFL0c7WUFDSSxPQUFPLEVBQUU7Z0JBQ0wsUUFBUTtnQkFDUixRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsUUFBUTtnQkFDUixRQUFRO2dCQUNSLFFBQVE7Z0JBQ1IsUUFBUTtnQkFDUixRQUFRO2dCQUNSLFFBQVE7YUFDWDtZQUNELFFBQVEsRUFBRSxJQUFJO1lBQ2QsaUJBQWlCLEVBQUUsT0FBTztTQUM3QjtRQUVELDRHQUE0RztRQUU1RztZQUNJLE9BQU8sRUFBRTtnQkFDTCxRQUFRO2dCQUNSLFNBQVM7Z0JBQ1QsU0FBUztnQkFDVCxVQUFVO2dCQUNWLFFBQVE7Z0JBQ1IsUUFBUTtnQkFDUixVQUFVO2dCQUNWLFFBQVE7Z0JBQ1IsUUFBUTthQUNYO1lBQ0QsUUFBUSxFQUFFLElBQUk7WUFDZCxpQkFBaUIsRUFBRSxPQUFPO1NBQzdCO1FBRUQsMEdBQTBHO1FBRTFHO1lBQ0ksT0FBTyxFQUFFO2dCQUNMLFNBQVM7Z0JBQ1QsYUFBYTtnQkFDYixhQUFhO2dCQUNiLGdCQUFnQjtnQkFDaEIsZ0JBQWdCO2dCQUNoQixPQUFPO2dCQUNQLFFBQVE7YUFDWDtZQUNELFFBQVEsRUFBRSxJQUFJO1lBQ2QsaUJBQWlCLEVBQUUsUUFBUTtTQUM5QjtRQUVELDZFQUE2RTtRQUU3RTtZQUNJLE9BQU8sRUFBRTtnQkFDTCxlQUFlO2dCQUNmLFlBQVk7Z0JBQ1osaUJBQWlCO2dCQUNqQixlQUFlO2dCQUNmLHFCQUFxQjtnQkFDckIsUUFBUTthQUNYO1lBQ0QsUUFBUSxFQUFFLElBQUk7WUFDZCxpQkFBaUIsRUFBRSxRQUFRO1NBQzlCO1FBRUQsd0ZBQXdGO1FBRXhGO1lBQ0ksT0FBTyxFQUFFO2dCQUNMLGVBQWU7Z0JBQ2Ysa0JBQWtCO2dCQUNsQixPQUFPO2dCQUNQLGFBQWE7Z0JBQ2IsY0FBYztnQkFDZCxTQUFTO2dCQUNULGNBQWM7YUFDakI7WUFDRCxRQUFRLEVBQUUsS0FBSztZQUNmLGlCQUFpQixFQUFFLFdBQVc7U0FDakM7UUFFRCxzR0FBc0c7UUFFdEc7WUFDSSxPQUFPLEVBQUU7Z0JBQ0wsV0FBVztnQkFDWCxxQkFBcUI7Z0JBQ3JCLGdCQUFnQjtnQkFDaEIsY0FBYztnQkFDZCxZQUFZO2dCQUNaLG1CQUFtQjthQUN0QjtZQUNELFFBQVEsRUFBRSxLQUFLO1lBQ2YsaUJBQWlCLEVBQUUsT0FBTztTQUM3QjtRQUVELGtGQUFrRjtRQUVsRjtZQUNJLE9BQU8sRUFBRTtnQkFDTCxhQUFhO2dCQUNiLHFCQUFxQjtnQkFDckIsa0JBQWtCO2dCQUNsQixVQUFVO2dCQUNWLFlBQVk7Z0JBQ1osZUFBZTthQUNsQjtZQUNELFFBQVEsRUFBRSxLQUFLO1lBQ2YsaUJBQWlCLEVBQUUsT0FBTztTQUM3QjtLQUNKLENBQUM7SUFFRixVQUFVLENBQUMsT0FBTyxDQUFDLFVBQUEsS0FBSyxJQUFJLE9BQUEsRUFBRSxDQUMxQiwwQkFBdUIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxNQUFNLGlDQUE2QjtTQUN6RixNQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsTUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQUcsRUFBbEIsQ0FBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBRyxDQUFBLEVBQUU7Ozs7d0JBRXZELHFCQUFNLDZCQUF5QixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBQTs7b0JBRG5FLE9BQU8sR0FBVyxDQUNwQixTQUFxRSxDQUN2RTtvQkFFRixhQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7Ozs7U0FDakQsQ0FDSixFQVQyQixDQVMzQixDQUFDLENBQUE7QUFDTixDQUFDLENBQUMsQ0FBQyJ9