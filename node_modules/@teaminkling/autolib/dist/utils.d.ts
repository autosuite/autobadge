import { ReplacementMap } from "./types/ReplacementMap";
/**
 * Given a file, perform replacements based on the [ReplacementMap] and write.
 *
 * @param filename the file's name
 * @param replacements the [Array] of [ReplacementMap]s
 */
export declare function rewriteFileContentsWithReplacements(filename: string, replacements: ReplacementMap[]): Promise<void>;
/**
 * Given a file, perform a single replacement based on the matcher and replacement.
 *
 * @param filename the file's name
 * @param matcher the matcher [RegExp]
 * @param replacement the replacement [string]
 */
export declare function rewriteFileContentsWithReplacement(filename: string, matcher: RegExp, replacement: string): Promise<void>;
export declare function findLatestVersionFromText(text: string, stableOnly: boolean): Promise<string | null>;
/**
 * Using `git` tags, find the latest version (if this is possible).
 *
 * If no version is found, just return 0.0.0 with no info associated.
 *
 * @param stableOnly whether we should only extract stable versions
 */
export declare function findLatestVersionFromGitTags(stableOnly: boolean): Promise<string>;
